
local Pulse = {}
Pulse.__index = Pulse
Pulse.Version = "1.0.0"

-- Services
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")

local player = Players.LocalPlayer
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Default Themes
Pulse.Themes = {
	Dark = {
		Primary = Color3.fromRGB(0, 0, 0),
		Secondary = Color3.fromRGB(10, 10, 10),
		Accent = Color3.fromRGB(34, 197, 94),
		AccentHover = Color3.fromRGB(40, 220, 105),
		Text = Color3.fromRGB(255, 255, 255),
		TextDim = Color3.fromRGB(180, 180, 180),
		TextDark = Color3.fromRGB(120, 120, 120),
		Border = Color3.fromRGB(60, 60, 60),
		BorderLight = Color3.fromRGB(80, 80, 80),
		Background = Color3.fromRGB(5, 5, 5),
		Hover = Color3.fromRGB(20, 20, 20),
		Error = Color3.fromRGB(220, 38, 38),
		Success = Color3.fromRGB(34, 197, 94),
		Warning = Color3.fromRGB(251, 191, 36),
		Info = Color3.fromRGB(59, 130, 246)
	},
	Light = {
		Primary = Color3.fromRGB(255, 255, 255),
		Secondary = Color3.fromRGB(240, 240, 240),
		Accent = Color3.fromRGB(34, 197, 94),
		AccentHover = Color3.fromRGB(40, 220, 105),
		Text = Color3.fromRGB(0, 0, 0),
		TextDim = Color3.fromRGB(60, 60, 60),
		TextDark = Color3.fromRGB(100, 100, 100),
		Border = Color3.fromRGB(200, 200, 200),
		BorderLight = Color3.fromRGB(180, 180, 180),
		Background = Color3.fromRGB(250, 250, 250),
		Hover = Color3.fromRGB(230, 230, 230),
		Error = Color3.fromRGB(220, 38, 38),
		Success = Color3.fromRGB(34, 197, 94),
		Warning = Color3.fromRGB(251, 191, 36),
		Info = Color3.fromRGB(59, 130, 246)
	},
	Ocean = {
		Primary = Color3.fromRGB(15, 23, 42),
		Secondary = Color3.fromRGB(30, 41, 59),
		Accent = Color3.fromRGB(14, 165, 233),
		AccentHover = Color3.fromRGB(56, 189, 248),
		Text = Color3.fromRGB(248, 250, 252),
		TextDim = Color3.fromRGB(203, 213, 225),
		TextDark = Color3.fromRGB(148, 163, 184),
		Border = Color3.fromRGB(51, 65, 85),
		BorderLight = Color3.fromRGB(71, 85, 105),
		Background = Color3.fromRGB(8, 13, 27),
		Hover = Color3.fromRGB(45, 55, 72),
		Error = Color3.fromRGB(239, 68, 68),
		Success = Color3.fromRGB(34, 197, 94),
		Warning = Color3.fromRGB(251, 191, 36),
		Info = Color3.fromRGB(14, 165, 233)
	},
	Purple = {
		Primary = Color3.fromRGB(17, 24, 39),
		Secondary = Color3.fromRGB(31, 41, 55),
		Accent = Color3.fromRGB(168, 85, 247),
		AccentHover = Color3.fromRGB(192, 132, 252),
		Text = Color3.fromRGB(243, 244, 246),
		TextDim = Color3.fromRGB(209, 213, 219),
		TextDark = Color3.fromRGB(156, 163, 175),
		Border = Color3.fromRGB(75, 85, 99),
		BorderLight = Color3.fromRGB(107, 114, 128),
		Background = Color3.fromRGB(10, 15, 25),
		Hover = Color3.fromRGB(55, 65, 81),
		Error = Color3.fromRGB(239, 68, 68),
		Success = Color3.fromRGB(34, 197, 94),
		Warning = Color3.fromRGB(251, 191, 36),
		Info = Color3.fromRGB(168, 85, 247)
	}
}

-- Lucide Icons
local Icons = {
	["home"] = "rbxassetid://7733960981",
	["settings"] = "rbxassetid://7734053495",
	["eye"] = "rbxassetid://7733774602",
	["eye-off"] = "rbxassetid://7733774602",
	["toggle-left"] = "rbxassetid://7734091286",
	["check"] = "rbxassetid://7733715400",
	["x"] = "rbxassetid://7743878857",
	["chevron-down"] = "rbxassetid://7733717447",
	["chevron-right"] = "rbxassetid://7733919682",
	["circle"] = "rbxassetid://7734053345",
	["info"] = "rbxassetid://7733965037",
	["alert-triangle"] = "rbxassetid://7733658504",
	["alert-circle"] = "rbxassetid://7733658276",
	["bell"] = "rbxassetid://7733911621",
	["menu"] = "rbxassetid://7734042234",
	["search"] = "rbxassetid://7734052925",
	["sliders"] = "rbxassetid://7734053697",
	["droplet"] = "rbxassetid://7733764327",
	["keyboard"] = "rbxassetid://7733760981",
	["package"] = "rbxassetid://7734021469",
	["trash"] = "rbxassetid://7743871002",
	["copy"] = "rbxassetid://7733674319",
	["save"] = "rbxassetid://7734052925"
}

-- Load Lucide Icons from CDN
local function loadLucideIcons()
	local success, result = pcall(function()
		return game:HttpGet("https://raw.githubusercontent.com/frappedevs/lucideblox/refs/heads/master/src/modules/util/icons.json")
	end)
	
	if success and result then
		local decoded = pcall(function()
			return HttpService:JSONDecode(result)
		end)
		
		if decoded and type(decoded) == "table" and decoded.icons then
			-- Merge loaded icons with defaults
			for iconName, iconId in pairs(decoded.icons) do
				Icons[iconName] = iconId
			end
			print("[Pulse UI] Loaded " .. tostring(#decoded.icons) .. " Lucide icons")
		end
	else
		warn("[Pulse UI] Failed to load Lucide icons from CDN, using default icons")
	end
end

-- Load icons on initialization
task.spawn(loadLucideIcons)

-- Utility Functions
local function tween(obj, props, duration, style, direction)
	local info = TweenInfo.new(
		duration or 0.3,
		style or Enum.EasingStyle.Quad,
		direction or Enum.EasingDirection.Out
	)
	local t = TweenService:Create(obj, info, props)
	t:Play()
	return t
end

local function createCorner(radius)
	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, radius)
	return corner
end

local function createStroke(thickness, color, transparency)
	local stroke = Instance.new("UIStroke")
	stroke.Thickness = thickness
	stroke.Color = color or Color3.fromRGB(255, 255, 255)
	stroke.Transparency = transparency or 0.8
	return stroke
end

local function createPadding(left, right, top, bottom)
	local padding = Instance.new("UIPadding")
	padding.PaddingLeft = UDim.new(0, left or 0)
	padding.PaddingRight = UDim.new(0, right or 0)
	padding.PaddingTop = UDim.new(0, top or 0)
	padding.PaddingBottom = UDim.new(0, bottom or 0)
	return padding
end

local function createIcon(iconName, size, color)
	local icon = Instance.new("ImageLabel")
	icon.Name = "Icon"
	icon.BackgroundTransparency = 1
	icon.Size = UDim2.new(0, size or 20, 0, size or 20)
	icon.Image = Icons[iconName] or Icons["package"]
	icon.ImageColor3 = color or Color3.fromRGB(255, 255, 255)
	icon.ScaleType = Enum.ScaleType.Fit
	return icon
end

local function rgbToHSV(r, g, b)
	r, g, b = r / 255, g / 255, b / 255
	local max = math.max(r, g, b)
	local min = math.min(r, g, b)
	local delta = max - min
	
	local h, s, v = 0, 0, max
	
	if delta > 0 then
		s = delta / max
		if max == r then
			h = ((g - b) / delta) % 6
		elseif max == g then
			h = (b - r) / delta + 2
		else
			h = (r - g) / delta + 4
		end
		h = h / 6
	end
	
	return h, s, v
end

local function hsvToRGB(h, s, v)
	local c = v * s
	local x = c * (1 - math.abs((h * 6) % 2 - 1))
	local m = v - c
	
	local r, g, b = 0, 0, 0
	if h < 1/6 then
		r, g, b = c, x, 0
	elseif h < 2/6 then
		r, g, b = x, c, 0
	elseif h < 3/6 then
		r, g, b = 0, c, x
	elseif h < 4/6 then
		r, g, b = 0, x, c
	elseif h < 5/6 then
		r, g, b = x, 0, c
	else
		r, g, b = c, 0, x
	end
	
	return (r + m) * 255, (g + m) * 255, (b + m) * 255
end

-- Window Class
function Pulse:CreateWindow(config)
	config = config or {}
	local window = {}
	
	window.Name = config.Name or "Pulse UI"
	window.Theme = self.Themes[config.Theme] or config.Theme or self.Themes.Dark
	window.Size = config.Size or (isMobile and UDim2.new(0, 350, 0, 500) or UDim2.new(0, 550, 0, 450))
	window.Position = config.Position or UDim2.new(0.5, 0, 0.5, 0)
	window.MinimizeKey = config.MinimizeKey or Enum.KeyCode.RightControl
	window.Tabs = {}
	window.CurrentTab = nil
	window.Notifications = {}
	
	-- Create ScreenGui
	window.ScreenGui = Instance.new("ScreenGui")
	window.ScreenGui.Name = "PulseUI_" .. window.Name
	window.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	window.ScreenGui.ResetOnSpawn = false
	
	pcall(function()
		window.ScreenGui.Parent = player:WaitForChild("PlayerGui")
	end)
	
	if not window.ScreenGui.Parent then
		window.ScreenGui.Parent = CoreGui
	end
	
	-- Create Main Frame
	window.Main = Instance.new("Frame")
	window.Main.Name = "Main"
	window.Main.Parent = window.ScreenGui
	window.Main.BackgroundColor3 = window.Theme.Primary
	window.Main.BorderSizePixel = 0
	window.Main.AnchorPoint = Vector2.new(0.5, 0.5)
	window.Main.Position = window.Position
	window.Main.Size = window.Size
	window.Main.ClipsDescendants = true
	createCorner(12).Parent = window.Main
	createStroke(2, window.Theme.Border).Parent = window.Main
	
	-- Create Topbar
	window.Topbar = Instance.new("Frame")
	window.Topbar.Name = "Topbar"
	window.Topbar.Parent = window.Main
	window.Topbar.BackgroundColor3 = window.Theme.Secondary
	window.Topbar.BorderSizePixel = 0
	window.Topbar.Size = UDim2.new(1, 0, 0, 45)
	createCorner(12).Parent = window.Topbar
	
	-- Title
	local titleIcon = createIcon(config.Icon or "home", 20, window.Theme.Text)
	titleIcon.Parent = window.Topbar
	titleIcon.Position = UDim2.new(0, 15, 0.5, 0)
	titleIcon.AnchorPoint = Vector2.new(0, 0.5)
	
	local title = Instance.new("TextLabel")
	title.Name = "Title"
	title.Parent = window.Topbar
	title.BackgroundTransparency = 1
	title.Position = UDim2.new(0, 45, 0, 0)
	title.Size = UDim2.new(1, -90, 1, 0)
	title.Font = Enum.Font.GothamBold
	title.Text = window.Name
	title.TextColor3 = window.Theme.Text
	title.TextSize = 16
	title.TextXAlignment = Enum.TextXAlignment.Left
	
	-- Close Button
	local closeBtn = Instance.new("TextButton")
	closeBtn.Name = "CloseButton"
	closeBtn.Parent = window.Topbar
	closeBtn.BackgroundColor3 = window.Theme.Hover
	closeBtn.BorderSizePixel = 0
	closeBtn.AnchorPoint = Vector2.new(1, 0.5)
	closeBtn.Position = UDim2.new(1, -10, 0.5, 0)
	closeBtn.Size = UDim2.new(0, 28, 0, 28)
	closeBtn.Text = ""
	createCorner(14).Parent = closeBtn
	
	local closeIcon = createIcon("x", 16, window.Theme.Text)
	closeIcon.Parent = closeBtn
	closeIcon.AnchorPoint = Vector2.new(0.5, 0.5)
	closeIcon.Position = UDim2.new(0.5, 0, 0.5, 0)
	
	closeBtn.MouseEnter:Connect(function()
		tween(closeBtn, {BackgroundColor3 = window.Theme.Error}, 0.2)
	end)
	closeBtn.MouseLeave:Connect(function()
		tween(closeBtn, {BackgroundColor3 = window.Theme.Hover}, 0.2)
	end)
	
	-- Content Container
	window.ContentContainer = Instance.new("Frame")
	window.ContentContainer.Name = "ContentContainer"
	window.ContentContainer.Parent = window.Main
	window.ContentContainer.BackgroundTransparency = 1
	window.ContentContainer.Position = UDim2.new(0, 0, 0, 45)
	window.ContentContainer.Size = UDim2.new(1, 0, 1, -45)
	
	-- Tab Bar
	window.TabBar = Instance.new("ScrollingFrame")
	window.TabBar.Name = "TabBar"
	window.TabBar.Parent = window.ContentContainer
	window.TabBar.BackgroundTransparency = 1
	window.TabBar.BorderSizePixel = 0
	window.TabBar.Size = UDim2.new(0.25, 0, 1, 0)
	window.TabBar.CanvasSize = UDim2.new(0, 0, 0, 0)
	window.TabBar.ScrollBarThickness = 4
	window.TabBar.ScrollBarImageColor3 = window.Theme.Border
	window.TabBar.AutomaticCanvasSize = Enum.AutomaticSize.Y
	createPadding(8, 8, 8, 8).Parent = window.TabBar
	
	local tabLayout = Instance.new("UIListLayout")
	tabLayout.Parent = window.TabBar
	tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
	tabLayout.Padding = UDim.new(0, 6)
	
	-- Tab Content Area
	window.TabContent = Instance.new("Frame")
	window.TabContent.Name = "TabContent"
	window.TabContent.Parent = window.ContentContainer
	window.TabContent.BackgroundTransparency = 1
	window.TabContent.Position = UDim2.new(0.25, 5, 0, 0)
	window.TabContent.Size = UDim2.new(0.75, -5, 1, 0)
	
	-- Make Draggable
	local dragging = false
	local dragInput, mousePos, framePos
	
	window.Topbar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			mousePos = input.Position
			framePos = window.Main.Position
			
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	
	UserInputService.InputChanged:Connect(function(input)
		if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			local delta = input.Position - mousePos
			window.Main.Position = UDim2.new(
				framePos.X.Scale,
				framePos.X.Offset + delta.X,
				framePos.Y.Scale,
				framePos.Y.Offset + delta.Y
			)
		end
	end)
	
	-- Minimize/Close Functions
	window.IsOpen = true
	
	closeBtn.MouseButton1Click:Connect(function()
		window:Toggle()
	end)
	
	if not isMobile then
		UserInputService.InputBegan:Connect(function(input, gameProcessed)
			if gameProcessed then return end
			if input.KeyCode == window.MinimizeKey then
				window:Toggle()
			end
		end)
	end
	
	function window:Toggle()
		self.IsOpen = not self.IsOpen
		self.Main.Visible = self.IsOpen
	end
	
	function window:Destroy()
		self.ScreenGui:Destroy()
	end
	
	function window:SetTheme(themeName)
		local newTheme = Pulse.Themes[themeName] or themeName
		if type(newTheme) ~= "table" then return end
		
		self.Theme = newTheme
		
		-- Update colors
		self.Main.BackgroundColor3 = newTheme.Primary
		self.Topbar.BackgroundColor3 = newTheme.Secondary
		title.TextColor3 = newTheme.Text
		closeBtn.BackgroundColor3 = newTheme.Hover
		
		-- Update all tabs
		for _, tab in pairs(self.Tabs) do
			tab:UpdateTheme(newTheme)
		end
	end
	
	-- Notification System
	function window:Notify(config)
		config = config or {}
		local notif = {}
		
		notif.Title = config.Title or "Notification"
		notif.Text = config.Text or ""
		notif.Duration = config.Duration or 3
		notif.Type = config.Type or "info" -- info, success, warning, error
		
		local notifFrame = Instance.new("Frame")
		notifFrame.Parent = self.ScreenGui
		notifFrame.BackgroundColor3 = self.Theme.Secondary
		notifFrame.BorderSizePixel = 0
		notifFrame.AnchorPoint = Vector2.new(1, 0)
		notifFrame.Position = UDim2.new(1, 20, 0, 80 + (#self.Notifications * 100))
		notifFrame.Size = UDim2.new(0, 300, 0, 85)
		notifFrame.ZIndex = 1000
		createCorner(12).Parent = notifFrame
		createStroke(2, self.Theme.Border).Parent = notifFrame
		createPadding(12, 12, 10, 10).Parent = notifFrame
		
		local typeColors = {
			info = self.Theme.Info,
			success = self.Theme.Success,
			warning = self.Theme.Warning,
			error = self.Theme.Error
		}
		
		local typeIcons = {
			info = "info",
			success = "check",
			warning = "alert-triangle",
			error = "alert-circle"
		}
		
		local icon = createIcon(typeIcons[notif.Type], 22, typeColors[notif.Type])
		icon.Parent = notifFrame
		icon.Position = UDim2.new(0, 0, 0, 5)
		
		local titleLabel = Instance.new("TextLabel")
		titleLabel.Parent = notifFrame
		titleLabel.BackgroundTransparency = 1
		titleLabel.Position = UDim2.new(0, 30, 0, 0)
		titleLabel.Size = UDim2.new(1, -30, 0, 20)
		titleLabel.Font = Enum.Font.GothamBold
		titleLabel.Text = notif.Title
		titleLabel.TextColor3 = self.Theme.Text
		titleLabel.TextSize = 13
		titleLabel.TextXAlignment = Enum.TextXAlignment.Left
		titleLabel.TextTruncate = Enum.TextTruncate.AtEnd
		
		local textLabel = Instance.new("TextLabel")
		textLabel.Parent = notifFrame
		textLabel.BackgroundTransparency = 1
		textLabel.Position = UDim2.new(0, 30, 0, 22)
		textLabel.Size = UDim2.new(1, -30, 0, 28)
		textLabel.Font = Enum.Font.Gotham
		textLabel.Text = notif.Text
		textLabel.TextColor3 = self.Theme.TextDim
		textLabel.TextSize = 11
		textLabel.TextWrapped = true
		textLabel.TextXAlignment = Enum.TextXAlignment.Left
		titleLabel.TextYAlignment = Enum.TextYAlignment.Top
		
		local progress = Instance.new("Frame")
		progress.Parent = notifFrame
		progress.BackgroundColor3 = self.Theme.Background
		progress.BorderSizePixel = 0
		progress.Position = UDim2.new(0, 0, 1, -3)
		progress.Size = UDim2.new(1, 0, 0, 3)
		createCorner(2).Parent = progress
		
		local progressFill = Instance.new("Frame")
		progressFill.Parent = progress
		progressFill.BackgroundColor3 = typeColors[notif.Type]
		progressFill.BorderSizePixel = 0
		progressFill.Size = UDim2.new(1, 0, 1, 0)
		createCorner(2).Parent = progressFill
		
		table.insert(self.Notifications, notifFrame)
		
		tween(notifFrame, {Position = UDim2.new(1, -310, 0, 80 + ((#self.Notifications - 1) * 100))}, 0.5, Enum.EasingStyle.Back)
		tween(progressFill, {Size = UDim2.new(0, 0, 1, 0)}, notif.Duration, Enum.EasingStyle.Linear)
		
		task.delay(notif.Duration, function()
			tween(notifFrame, {Position = UDim2.new(1, 20, 0, 80 + ((#self.Notifications - 1) * 100))}, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
			task.wait(0.3)
			
			for i, nf in ipairs(self.Notifications) do
				if nf == notifFrame then
					table.remove(self.Notifications, i)
					break
				end
			end
			
			notifFrame:Destroy()
			
			-- Reposition remaining notifications
			for i, nf in ipairs(self.Notifications) do
				tween(nf, {Position = UDim2.new(1, -310, 0, 80 + ((i - 1) * 100))}, 0.3)
			end
		end)
	end
	
	-- Create Tab Function
	function window:CreateTab(config)
		config = config or {}
		local tab = {}
		
		tab.Name = config.Name or "Tab"
		tab.Icon = config.Icon or "home"
		tab.Window = self
		tab.Elements = {}
		
		-- Tab Button
		tab.Button = Instance.new("TextButton")
		tab.Button.Name = tab.Name
		tab.Button.Parent = self.TabBar
		tab.Button.BackgroundColor3 = self.Theme.Secondary
		tab.Button.BorderSizePixel = 0
		tab.Button.Size = UDim2.new(1, 0, 0, 42)
		tab.Button.Text = ""
		tab.Button.LayoutOrder = #self.Tabs + 1
		createCorner(10).Parent = tab.Button
		
		local buttonStroke = createStroke(2, self.Theme.Border)
		buttonStroke.Parent = tab.Button
		
		local buttonIcon = createIcon(tab.Icon, 18, self.Theme.TextDim)
		buttonIcon.Name = "Icon"
		buttonIcon.Parent = tab.Button
		buttonIcon.Position = UDim2.new(0, 10, 0.5, 0)
		buttonIcon.AnchorPoint = Vector2.new(0, 0.5)
		
		local buttonTitle = Instance.new("TextLabel")
		buttonTitle.Name = "Title"
		buttonTitle.Parent = tab.Button
		buttonTitle.BackgroundTransparency = 1
		buttonTitle.Position = UDim2.new(0, 35, 0, 0)
		buttonTitle.Size = UDim2.new(1, -40, 1, 0)
		buttonTitle.Font = Enum.Font.GothamBold
		buttonTitle.Text = tab.Name
		buttonTitle.TextColor3 = self.Theme.TextDim
		buttonTitle.TextSize = 12
		buttonTitle.TextXAlignment = Enum.TextXAlignment.Left
		
		-- Tab Content
		tab.Content = Instance.new("ScrollingFrame")
		tab.Content.Name = tab.Name .. "Content"
		tab.Content.Parent = self.TabContent
		tab.Content.BackgroundTransparency = 1
		tab.Content.BorderSizePixel = 0
		tab.Content.Size = UDim2.new(1, 0, 1, 0)
		tab.Content.CanvasSize = UDim2.new(0, 0, 0, 0)
		tab.Content.ScrollBarThickness = 4
		tab.Content.ScrollBarImageColor3 = self.Theme.Border
		tab.Content.AutomaticCanvasSize = Enum.AutomaticSize.Y
		tab.Content.Visible = false
		createPadding(8, 8, 8, 8).Parent = tab.Content
		
		local contentLayout = Instance.new("UIListLayout")
		contentLayout.Parent = tab.Content
		contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
		contentLayout.Padding = UDim.new(0, 8)
		
		-- Button Click
		tab.Button.MouseButton1Click:Connect(function()
			for _, t in pairs(self.Tabs) do
				t.Content.Visible = false
				t.Button.BackgroundColor3 = self.Theme.Secondary
				local icon = t.Button:FindFirstChild("Icon")
				local title = t.Button:FindFirstChild("Title")
				if icon then icon.ImageColor3 = self.Theme.TextDim end
				if title then title.TextColor3 = self.Theme.TextDim end
				local stroke = t.Button:FindFirstChildOfClass("UIStroke")
				if stroke then stroke.Color = self.Theme.Border end
			end
			
			tab.Content.Visible = true
			tab.Button.BackgroundColor3 = self.Theme.Hover
			buttonIcon.ImageColor3 = self.Theme.Accent
			buttonTitle.TextColor3 = self.Theme.Text
			buttonStroke.Color = self.Theme.Accent
			
			self.CurrentTab = tab
		end)
		
		-- Hover Effects
		tab.Button.MouseEnter:Connect(function()
			if self.CurrentTab ~= tab then
				tween(tab.Button, {BackgroundColor3 = self.Theme.Hover}, 0.2)
			end
		end)
		
		tab.Button.MouseLeave:Connect(function()
			if self.CurrentTab ~= tab then
				tween(tab.Button, {BackgroundColor3 = self.Theme.Secondary}, 0.2)
			end
		end)
		
		function tab:UpdateTheme(theme)
			tab.Button.BackgroundColor3 = theme.Secondary
			buttonIcon.ImageColor3 = theme.TextDim
			buttonTitle.TextColor3 = theme.TextDim
			buttonStroke.Color = theme.Border
			
			if self.Window.CurrentTab == self then
				tab.Button.BackgroundColor3 = theme.Hover
				buttonIcon.ImageColor3 = theme.Accent
				buttonTitle.TextColor3 = theme.Text
				buttonStroke.Color = theme.Accent
			end
			
			-- Update all elements
			for _, element in pairs(self.Elements) do
				if element.UpdateTheme then
					element:UpdateTheme(theme)
				end
			end
		end
		
		-- Section Creator
		function tab:CreateSection(name)
			local section = Instance.new("Frame")
			section.Name = "Section"
			section.Parent = self.Content
			section.BackgroundTransparency = 1
			section.Size = UDim2.new(1, 0, 0, 25)
			section.LayoutOrder = #self.Elements + 1
			
			local sectionLabel = Instance.new("TextLabel")
			sectionLabel.Parent = section
			sectionLabel.BackgroundTransparency = 1
			sectionLabel.Size = UDim2.new(1, 0, 1, 0)
			sectionLabel.Font = Enum.Font.GothamBold
			sectionLabel.Text = name
			sectionLabel.TextColor3 = self.Window.Theme.Text
			sectionLabel.TextSize = 14
			sectionLabel.TextXAlignment = Enum.TextXAlignment.Left
			
			local divider = Instance.new("Frame")
			divider.Parent = section
			divider.BackgroundColor3 = self.Window.Theme.Border
			divider.BorderSizePixel = 0
			divider.Position = UDim2.new(0, 0, 1, -2)
			divider.Size = UDim2.new(1, 0, 0, 2)
			createCorner(1).Parent = divider
			
			table.insert(self.Elements, {
				Type = "Section",
				UpdateTheme = function(self, theme)
					sectionLabel.TextColor3 = theme.Text
					divider.BackgroundColor3 = theme.Border
				end
			})
			
			return section
		end
		
		-- Button Creator
		function tab:CreateButton(config)
			config = config or {}
			local button = {}
			
			button.Name = config.Name or "Button"
			button.Description = config.Description or ""
			button.Callback = config.Callback or function() end
			
			local buttonFrame = Instance.new("TextButton")
			buttonFrame.Name = "Button"
			buttonFrame.Parent = self.Content
			buttonFrame.BackgroundColor3 = self.Window.Theme.Secondary
			buttonFrame.BorderSizePixel = 0
			buttonFrame.Size = UDim2.new(1, 0, 0, config.Description ~= "" and 60 or 42)
			buttonFrame.Text = ""
			buttonFrame.LayoutOrder = #self.Elements + 1
			createCorner(10).Parent = buttonFrame
			createStroke(2, self.Window.Theme.Border).Parent = buttonFrame
			createPadding(12, 12, 10, 10).Parent = buttonFrame
			
			if config.Icon then
				local icon = createIcon(config.Icon, 20, self.Window.Theme.Accent)
				icon.Parent = buttonFrame
				icon.Position = UDim2.new(0, 0, 0, 5)
			end
			
			local titleLabel = Instance.new("TextLabel")
			titleLabel.Name = "Title"
			titleLabel.Parent = buttonFrame
			titleLabel.BackgroundTransparency = 1
			titleLabel.Position = UDim2.new(0, config.Icon and 28 or 0, 0, 0)
			titleLabel.Size = UDim2.new(1, config.Icon and -28 or 0, 0, 20)
			titleLabel.Font = Enum.Font.GothamBold
			titleLabel.Text = button.Name
			titleLabel.TextColor3 = self.Window.Theme.Text
			titleLabel.TextSize = 13
			titleLabel.TextXAlignment = Enum.TextXAlignment.Left
			
			if button.Description ~= "" then
				local descLabel = Instance.new("TextLabel")
				descLabel.Name = "Description"
				descLabel.Parent = buttonFrame
				descLabel.BackgroundTransparency = 1
				descLabel.Position = UDim2.new(0, config.Icon and 28 or 0, 0, 22)
				descLabel.Size = UDim2.new(1, config.Icon and -28 or 0, 0, 28)
				descLabel.Font = Enum.Font.Gotham
				descLabel.Text = button.Description
				descLabel.TextColor3 = self.Window.Theme.TextDark
				descLabel.TextSize = 11
				descLabel.TextWrapped = true
				descLabel.TextXAlignment = Enum.TextXAlignment.Left
				descLabel.TextYAlignment = Enum.TextYAlignment.Top
			end
			
			buttonFrame.MouseButton1Click:Connect(function()
				pcall(button.Callback)
			end)
			
			buttonFrame.MouseEnter:Connect(function()
				tween(buttonFrame, {BackgroundColor3 = self.Window.Theme.Hover}, 0.2)
			end)
			
			buttonFrame.MouseLeave:Connect(function()
				tween(buttonFrame, {BackgroundColor3 = self.Window.Theme.Secondary}, 0.2)
			end)
			
			button.UpdateTheme = function(self, theme)
				buttonFrame.BackgroundColor3 = theme.Secondary
				titleLabel.TextColor3 = theme.Text
				if buttonFrame:FindFirstChild("Description") then
					buttonFrame.Description.TextColor3 = theme.TextDark
				end
				local stroke = buttonFrame:FindFirstChildOfClass("UIStroke")
				if stroke then stroke.Color = theme.Border end
			end
			
			table.insert(self.Elements, button)
			return button
		end
		
		-- Toggle Creator
		function tab:CreateToggle(config)
			config = config or {}
			local toggle = {}
			
			toggle.Name = config.Name or "Toggle"
			toggle.Description = config.Description or ""
			toggle.Default = config.Default or false
			toggle.Callback = config.Callback or function() end
			toggle.Value = toggle.Default
			
			local toggleFrame = Instance.new("Frame")
			toggleFrame.Name = "Toggle"
			toggleFrame.Parent = self.Content
			toggleFrame.BackgroundColor3 = self.Window.Theme.Secondary
			toggleFrame.BorderSizePixel = 0
			toggleFrame.Size = UDim2.new(1, 0, 0, config.Description ~= "" and 60 or 42)
			toggleFrame.LayoutOrder = #self.Elements + 1
			createCorner(10).Parent = toggleFrame
			createStroke(2, self.Window.Theme.Border).Parent = toggleFrame
			createPadding(12, 12, 10, 10).Parent = toggleFrame
			
			if config.Icon then
				local icon = createIcon(config.Icon, 20, self.Window.Theme.Accent)
				icon.Parent = toggleFrame
				icon.Position = UDim2.new(0, 0, 0, 5)
			end
			
			local titleLabel = Instance.new("TextLabel")
			titleLabel.Name = "Title"
			titleLabel.Parent = toggleFrame
			titleLabel.BackgroundTransparency = 1
			titleLabel.Position = UDim2.new(0, config.Icon and 28 or 0, 0, 0)
			titleLabel.Size = UDim2.new(1, -80, 0, 20)
			titleLabel.Font = Enum.Font.GothamBold
			titleLabel.Text = toggle.Name
			titleLabel.TextColor3 = self.Window.Theme.Text
			titleLabel.TextSize = 13
			titleLabel.TextXAlignment = Enum.TextXAlignment.Left
			
			if toggle.Description ~= "" then
				local descLabel = Instance.new("TextLabel")
				descLabel.Name = "Description"
				descLabel.Parent = toggleFrame
				descLabel.BackgroundTransparency = 1
				descLabel.Position = UDim2.new(0, config.Icon and 28 or 0, 0, 22)
				descLabel.Size = UDim2.new(1, -80, 0, 28)
				descLabel.Font = Enum.Font.Gotham
				descLabel.Text = toggle.Description
				descLabel.TextColor3 = self.Window.Theme.TextDark
				descLabel.TextSize = 11
				descLabel.TextWrapped = true
				descLabel.TextXAlignment = Enum.TextXAlignment.Left
				descLabel.TextYAlignment = Enum.TextYAlignment.Top
			end
			
			local switchButton = Instance.new("TextButton")
			switchButton.Name = "Switch"
			switchButton.Parent = toggleFrame
			switchButton.AnchorPoint = Vector2.new(1, 0.5)
			switchButton.Position = UDim2.new(1, 0, 0.5, 0)
			switchButton.Size = UDim2.new(0, 48, 0, 24)
			switchButton.BackgroundColor3 = toggle.Default and self.Window.Theme.Accent or self.Window.Theme.Background
			switchButton.BorderSizePixel = 0
			switchButton.Text = ""
			createCorner(12).Parent = switchButton
			
			local knob = Instance.new("Frame")
			knob.Name = "Knob"
			knob.Parent = switchButton
			knob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			knob.BorderSizePixel = 0
			knob.Position = toggle.Default and UDim2.new(1, -22, 0.5, 0) or UDim2.new(0, 3, 0.5, 0)
			knob.AnchorPoint = Vector2.new(0, 0.5)
			knob.Size = UDim2.new(0, 18, 0, 18)
			createCorner(9).Parent = knob
			
			function toggle:SetValue(value)
				self.Value = value
				
				if value then
					tween(knob, {Position = UDim2.new(1, -22, 0.5, 0)}, 0.2)
					tween(switchButton, {BackgroundColor3 = self.Window.Theme.Accent}, 0.2)
				else
					tween(knob, {Position = UDim2.new(0, 3, 0.5, 0)}, 0.2)
					tween(switchButton, {BackgroundColor3 = self.Window.Theme.Background}, 0.2)
				end
				
				pcall(self.Callback, value)
			end
			
			switchButton.MouseButton1Click:Connect(function()
				toggle:SetValue(not toggle.Value)
			end)
			
			toggle.UpdateTheme = function(self, theme)
				self.Window = {Theme = theme}
				toggleFrame.BackgroundColor3 = theme.Secondary
				titleLabel.TextColor3 = theme.Text
				if toggleFrame:FindFirstChild("Description") then
					toggleFrame.Description.TextColor3 = theme.TextDark
				end
				local stroke = toggleFrame:FindFirstChildOfClass("UIStroke")
				if stroke then stroke.Color = theme.Border end
				switchButton.BackgroundColor3 = self.Value and theme.Accent or theme.Background
			end
			
			table.insert(self.Elements, toggle)
			return toggle
		end
		
		-- Slider Creator
		function tab:CreateSlider(config)
			config = config or {}
			local slider = {}
			
			slider.Name = config.Name or "Slider"
			slider.Min = config.Min or 0
			slider.Max = config.Max or 100
			slider.Default = config.Default or slider.Min
			slider.Increment = config.Increment or 1
			slider.Callback = config.Callback or function() end
			slider.Value = slider.Default
			
			local sliderFrame = Instance.new("Frame")
			sliderFrame.Name = "Slider"
			sliderFrame.Parent = self.Content
			sliderFrame.BackgroundColor3 = self.Window.Theme.Secondary
			sliderFrame.BorderSizePixel = 0
			sliderFrame.Size = UDim2.new(1, 0, 0, 65)
			sliderFrame.LayoutOrder = #self.Elements + 1
			createCorner(10).Parent = sliderFrame
			createStroke(2, self.Window.Theme.Border).Parent = sliderFrame
			createPadding(12, 12, 10, 10).Parent = sliderFrame
			
			local titleLabel = Instance.new("TextLabel")
			titleLabel.Name = "Title"
			titleLabel.Parent = sliderFrame
			titleLabel.BackgroundTransparency = 1
			titleLabel.Size = UDim2.new(0.7, 0, 0, 20)
			titleLabel.Font = Enum.Font.GothamBold
			titleLabel.Text = slider.Name
			titleLabel.TextColor3 = self.Window.Theme.Text
			titleLabel.TextSize = 13
			titleLabel.TextXAlignment = Enum.TextXAlignment.Left
			
			local valueLabel = Instance.new("TextLabel")
			valueLabel.Name = "Value"
			valueLabel.Parent = sliderFrame
			valueLabel.BackgroundTransparency = 1
			valueLabel.Position = UDim2.new(0.7, 0, 0, 0)
			valueLabel.Size = UDim2.new(0.3, 0, 0, 20)
			valueLabel.Font = Enum.Font.GothamBold
			valueLabel.Text = tostring(slider.Value)
			valueLabel.TextColor3 = self.Window.Theme.Accent
			valueLabel.TextSize = 13
			valueLabel.TextXAlignment = Enum.TextXAlignment.Right
			
			local sliderBg = Instance.new("Frame")
			sliderBg.Name = "SliderBg"
			sliderBg.Parent = sliderFrame
			sliderBg.BackgroundColor3 = self.Window.Theme.Background
			sliderBg.BorderSizePixel = 0
			sliderBg.Position = UDim2.new(0, 0, 0, 30)
			sliderBg.Size = UDim2.new(1, 0, 0, 8)
			createCorner(4).Parent = sliderBg
			
			local sliderFill = Instance.new("Frame")
			sliderFill.Name = "Fill"
			sliderFill.Parent = sliderBg
			sliderFill.BackgroundColor3 = self.Window.Theme.Accent
			sliderFill.BorderSizePixel = 0
			sliderFill.Size = UDim2.new((slider.Value - slider.Min) / (slider.Max - slider.Min), 0, 1, 0)
			createCorner(4).Parent = sliderFill
			
			local sliderButton = Instance.new("TextButton")
			sliderButton.Name = "Button"
			sliderButton.Parent = sliderBg
			sliderButton.BackgroundTransparency = 1
			sliderButton.Size = UDim2.new(1, 0, 1, 0)
			sliderButton.Text = ""
			
			function slider:SetValue(value)
				value = math.clamp(value, self.Min, self.Max)
				value = math.floor(value / self.Increment + 0.5) * self.Increment
				self.Value = value
				
				valueLabel.Text = tostring(value)
				local fillSize = (value - self.Min) / (self.Max - self.Min)
				tween(sliderFill, {Size = UDim2.new(fillSize, 0, 1, 0)}, 0.1)
				
				pcall(self.Callback, value)
			end
			
			local dragging = false
			
			sliderButton.MouseButton1Down:Connect(function()
				dragging = true
			end)
			
			UserInputService.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					dragging = false
				end
			end)
			
			sliderButton.MouseButton1Click:Connect(function()
				local mousePos = UserInputService:GetMouseLocation().X
				local sliderPos = sliderBg.AbsolutePosition.X
				local sliderSize = sliderBg.AbsoluteSize.X
				local percentage = math.clamp((mousePos - sliderPos) / sliderSize, 0, 1)
				local value = slider.Min + (slider.Max - slider.Min) * percentage
				slider:SetValue(value)
			end)
			
			RunService.Heartbeat:Connect(function()
				if dragging then
					local mousePos = UserInputService:GetMouseLocation().X
					local sliderPos = sliderBg.AbsolutePosition.X
					local sliderSize = sliderBg.AbsoluteSize.X
					local percentage = math.clamp((mousePos - sliderPos) / sliderSize, 0, 1)
					local value = slider.Min + (slider.Max - slider.Min) * percentage
					slider:SetValue(value)
				end
			end)
			
			slider.UpdateTheme = function(self, theme)
				sliderFrame.BackgroundColor3 = theme.Secondary
				titleLabel.TextColor3 = theme.Text
				valueLabel.TextColor3 = theme.Accent
				sliderBg.BackgroundColor3 = theme.Background
				sliderFill.BackgroundColor3 = theme.Accent
				local stroke = sliderFrame:FindFirstChildOfClass("UIStroke")
				if stroke then stroke.Color = theme.Border end
			end
			
			table.insert(self.Elements, slider)
			return slider
		end
		
		-- Dropdown Creator
		function tab:CreateDropdown(config)
			config = config or {}
			local dropdown = {}
			
			dropdown.Name = config.Name or "Dropdown"
			dropdown.Options = config.Options or {"Option 1", "Option 2"}
			dropdown.Default = config.Default or dropdown.Options[1]
			dropdown.Callback = config.Callback or function() end
			dropdown.Value = dropdown.Default
			dropdown.IsOpen = false
			
			local dropdownFrame = Instance.new("Frame")
			dropdownFrame.Name = "Dropdown"
			dropdownFrame.Parent = self.Content
			dropdownFrame.BackgroundColor3 = self.Window.Theme.Secondary
			dropdownFrame.BorderSizePixel = 0
			dropdownFrame.Size = UDim2.new(1, 0, 0, 42)
			dropdownFrame.LayoutOrder = #self.Elements + 1
			dropdownFrame.ClipsDescendants = false
			createCorner(10).Parent = dropdownFrame
			createStroke(2, self.Window.Theme.Border).Parent = dropdownFrame
			createPadding(12, 12, 10, 10).Parent = dropdownFrame
			
			local titleLabel = Instance.new("TextLabel")
			titleLabel.Name = "Title"
			titleLabel.Parent = dropdownFrame
			titleLabel.BackgroundTransparency = 1
			titleLabel.Size = UDim2.new(0.6, 0, 0, 22)
			titleLabel.Font = Enum.Font.GothamBold
			titleLabel.Text = dropdown.Name
			titleLabel.TextColor3 = self.Window.Theme.Text
			titleLabel.TextSize = 13
			titleLabel.TextXAlignment = Enum.TextXAlignment.Left
			
			local dropdownButton = Instance.new("TextButton")
			dropdownButton.Name = "Button"
			dropdownButton.Parent = dropdownFrame
			dropdownButton.BackgroundColor3 = self.Window.Theme.Background
			dropdownButton.BorderSizePixel = 0
			dropdownButton.AnchorPoint = Vector2.new(1, 0)
			dropdownButton.Position = UDim2.new(1, 0, 0, 0)
			dropdownButton.Size = UDim2.new(0.38, 0, 0, 22)
			dropdownButton.Font = Enum.Font.Gotham
			dropdownButton.Text = "  " .. dropdown.Value
			dropdownButton.TextColor3 = self.Window.Theme.Text
			dropdownButton.TextSize = 11
			dropdownButton.TextXAlignment = Enum.TextXAlignment.Left
			dropdownButton.TextTruncate = Enum.TextTruncate.AtEnd
			createCorner(6).Parent = dropdownButton
			
			local chevron = createIcon("chevron-down", 14, self.Window.Theme.TextDim)
			chevron.Parent = dropdownButton
			chevron.AnchorPoint = Vector2.new(1, 0.5)
			chevron.Position = UDim2.new(1, -4, 0.5, 0)
			
			local optionsFrame = Instance.new("ScrollingFrame")
			optionsFrame.Name = "Options"
			optionsFrame.Parent = dropdownFrame
			optionsFrame.BackgroundColor3 = self.Window.Theme.Primary
			optionsFrame.BorderSizePixel = 0
			optionsFrame.Position = UDim2.new(0, 0, 1, 5)
			optionsFrame.Size = UDim2.new(1, 0, 0, 0)
			optionsFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
			optionsFrame.ScrollBarThickness = 4
			optionsFrame.ScrollBarImageColor3 = self.Window.Theme.Border
			optionsFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
			optionsFrame.Visible = false
			optionsFrame.ZIndex = 100
			createCorner(8).Parent = optionsFrame
			createStroke(2, self.Window.Theme.Border).Parent = optionsFrame
			createPadding(4, 4, 4, 4).Parent = optionsFrame
			
			local optionsLayout = Instance.new("UIListLayout")
			optionsLayout.Parent = optionsFrame
			optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
			optionsLayout.Padding = UDim.new(0, 2)
			
			for i, option in ipairs(dropdown.Options) do
				local optionButton = Instance.new("TextButton")
				optionButton.Name = option
				optionButton.Parent = optionsFrame
				optionButton.BackgroundColor3 = self.Window.Theme.Secondary
				optionButton.BorderSizePixel = 0
				optionButton.Size = UDim2.new(1, 0, 0, 28)
				optionButton.Font = Enum.Font.Gotham
				optionButton.Text = option
				optionButton.TextColor3 = self.Window.Theme.Text
				optionButton.TextSize = 11
				optionButton.LayoutOrder = i
				createCorner(6).Parent = optionButton
				
				optionButton.MouseButton1Click:Connect(function()
					dropdown:SetValue(option)
					dropdown:Toggle()
				end)
				
				optionButton.MouseEnter:Connect(function()
					tween(optionButton, {BackgroundColor3 = self.Window.Theme.Hover}, 0.2)
				end)
				
				optionButton.MouseLeave:Connect(function()
					tween(optionButton, {BackgroundColor3 = self.Window.Theme.Secondary}, 0.2)
				end)
			end
			
			function dropdown:SetValue(value)
				self.Value = value
				dropdownButton.Text = "  " .. value
				pcall(self.Callback, value)
			end
			
			function dropdown:Toggle()
				self.IsOpen = not self.IsOpen
				
				if self.IsOpen then
					local maxHeight = math.min(#self.Options * 30, 120)
					optionsFrame.Visible = true
					tween(optionsFrame, {Size = UDim2.new(1, 0, 0, maxHeight)}, 0.3)
					tween(chevron, {Rotation = 180}, 0.3)
					tween(dropdownFrame, {Size = UDim2.new(1, 0, 0, 42 + maxHeight + 5)}, 0.3)
				else
					tween(optionsFrame, {Size = UDim2.new(1, 0, 0, 0)}, 0.3)
					tween(chevron, {Rotation = 0}, 0.3)
					tween(dropdownFrame, {Size = UDim2.new(1, 0, 0, 42)}, 0.3)
					task.wait(0.3)
					optionsFrame.Visible = false
				end
			end
			
			dropdownButton.MouseButton1Click:Connect(function()
				dropdown:Toggle()
			end)
			
			dropdown.UpdateTheme = function(self, theme)
				dropdownFrame.BackgroundColor3 = theme.Secondary
				titleLabel.TextColor3 = theme.Text
				dropdownButton.BackgroundColor3 = theme.Background
				dropdownButton.TextColor3 = theme.Text
				chevron.ImageColor3 = theme.TextDim
				optionsFrame.BackgroundColor3 = theme.Primary
				local stroke = dropdownFrame:FindFirstChildOfClass("UIStroke")
				if stroke then stroke.Color = theme.Border end
				
				for _, option in ipairs(optionsFrame:GetChildren()) do
					if option:IsA("TextButton") then
						option.BackgroundColor3 = theme.Secondary
						option.TextColor3 = theme.Text
					end
				end
			end
			
			table.insert(self.Elements, dropdown)
			return dropdown
		end
		
		-- TextBox Creator
		function tab:CreateTextBox(config)
			config = config or {}
			local textbox = {}
			
			textbox.Name = config.Name or "TextBox"
			textbox.Placeholder = config.Placeholder or "Enter text..."
			textbox.Default = config.Default or ""
			textbox.Callback = config.Callback or function() end
			textbox.Value = textbox.Default
			
			local textboxFrame = Instance.new("Frame")
			textboxFrame.Name = "TextBox"
			textboxFrame.Parent = self.Content
			textboxFrame.BackgroundColor3 = self.Window.Theme.Secondary
			textboxFrame.BorderSizePixel = 0
			textboxFrame.Size = UDim2.new(1, 0, 0, 65)
			textboxFrame.LayoutOrder = #self.Elements + 1
			createCorner(10).Parent = textboxFrame
			createStroke(2, self.Window.Theme.Border).Parent = textboxFrame
			createPadding(12, 12, 10, 10).Parent = textboxFrame
			
			local titleLabel = Instance.new("TextLabel")
			titleLabel.Name = "Title"
			titleLabel.Parent = textboxFrame
			titleLabel.BackgroundTransparency = 1
			titleLabel.Size = UDim2.new(1, 0, 0, 20)
			titleLabel.Font = Enum.Font.GothamBold
			titleLabel.Text = textbox.Name
			titleLabel.TextColor3 = self.Window.Theme.Text
			titleLabel.TextSize = 13
			titleLabel.TextXAlignment = Enum.TextXAlignment.Left
			
			local inputFrame = Instance.new("Frame")
			inputFrame.Name = "InputFrame"
			inputFrame.Parent = textboxFrame
			inputFrame.BackgroundColor3 = self.Window.Theme.Background
			inputFrame.BorderSizePixel = 0
			inputFrame.Position = UDim2.new(0, 0, 0, 28)
			inputFrame.Size = UDim2.new(1, 0, 0, 27)
			createCorner(6).Parent = inputFrame
			createStroke(1, self.Window.Theme.Border, 0.5).Parent = inputFrame
			
			local textInput = Instance.new("TextBox")
			textInput.Name = "Input"
			textInput.Parent = inputFrame
			textInput.BackgroundTransparency = 1
			textInput.Size = UDim2.new(1, -10, 1, 0)
			textInput.Position = UDim2.new(0, 5, 0, 0)
			textInput.Font = Enum.Font.Gotham
			textInput.PlaceholderText = textbox.Placeholder
			textInput.PlaceholderColor3 = self.Window.Theme.TextDark
			textInput.Text = textbox.Default
			textInput.TextColor3 = self.Window.Theme.Text
			textInput.TextSize = 11
			textInput.TextXAlignment = Enum.TextXAlignment.Left
			textInput.ClearTextOnFocus = false
			
			function textbox:SetValue(value)
				self.Value = value
				textInput.Text = value
				pcall(self.Callback, value)
			end
			
			textInput.FocusLost:Connect(function()
				textbox:SetValue(textInput.Text)
			end)
			
			textInput.Focused:Connect(function()
				local stroke = inputFrame:FindFirstChildOfClass("UIStroke")
				if stroke then
					tween(stroke, {Color = self.Window.Theme.Accent, Transparency = 0}, 0.2)
				end
			end)
			
			textInput.FocusLost:Connect(function()
				local stroke = inputFrame:FindFirstChildOfClass("UIStroke")
				if stroke then
					tween(stroke, {Color = self.Window.Theme.Border, Transparency = 0.5}, 0.2)
				end
			end)
			
			textbox.UpdateTheme = function(self, theme)
				textboxFrame.BackgroundColor3 = theme.Secondary
				titleLabel.TextColor3 = theme.Text
				inputFrame.BackgroundColor3 = theme.Background
				textInput.TextColor3 = theme.Text
				textInput.PlaceholderColor3 = theme.TextDark
				local frameStroke = textboxFrame:FindFirstChildOfClass("UIStroke")
				if frameStroke then frameStroke.Color = theme.Border end
				local inputStroke = inputFrame:FindFirstChildOfClass("UIStroke")
				if inputStroke then inputStroke.Color = theme.Border end
			end
			
			table.insert(self.Elements, textbox)
			return textbox
		end
		
		-- Keybind Creator
		function tab:CreateKeybind(config)
			config = config or {}
			local keybind = {}
			
			keybind.Name = config.Name or "Keybind"
			keybind.Default = config.Default or Enum.KeyCode.E
			keybind.Callback = config.Callback or function() end
			keybind.Value = keybind.Default
			keybind.Listening = false
			
			local keybindFrame = Instance.new("Frame")
			keybindFrame.Name = "Keybind"
			keybindFrame.Parent = self.Content
			keybindFrame.BackgroundColor3 = self.Window.Theme.Secondary
			keybindFrame.BorderSizePixel = 0
			keybindFrame.Size = UDim2.new(1, 0, 0, 42)
			keybindFrame.LayoutOrder = #self.Elements + 1
			createCorner(10).Parent = keybindFrame
			createStroke(2, self.Window.Theme.Border).Parent = keybindFrame
			createPadding(12, 12, 10, 10).Parent = keybindFrame
			
			local titleLabel = Instance.new("TextLabel")
			titleLabel.Name = "Title"
			titleLabel.Parent = keybindFrame
			titleLabel.BackgroundTransparency = 1
			titleLabel.Size = UDim2.new(0.6, 0, 1, 0)
			titleLabel.Font = Enum.Font.GothamBold
			titleLabel.Text = keybind.Name
			titleLabel.TextColor3 = self.Window.Theme.Text
			titleLabel.TextSize = 13
			titleLabel.TextXAlignment = Enum.TextXAlignment.Left
			
			local keybindButton = Instance.new("TextButton")
			keybindButton.Name = "Button"
			keybindButton.Parent = keybindFrame
			keybindButton.BackgroundColor3 = self.Window.Theme.Background
			keybindButton.BorderSizePixel = 0
			keybindButton.AnchorPoint = Vector2.new(1, 0.5)
			keybindButton.Position = UDim2.new(1, 0, 0.5, 0)
			keybindButton.Size = UDim2.new(0, 80, 0, 22)
			keybindButton.Font = Enum.Font.GothamBold
			keybindButton.Text = keybind.Value.Name
			keybindButton.TextColor3 = self.Window.Theme.Text
			keybindButton.TextSize = 11
			createCorner(6).Parent = keybindButton
			
			function keybind:SetValue(key)
				self.Value = key
				keybindButton.Text = key.Name
				pcall(self.Callback, key)
			end
			
			keybindButton.MouseButton1Click:Connect(function()
				if keybind.Listening then return end
				
				keybind.Listening = true
				keybindButton.Text = "..."
				keybindButton.BackgroundColor3 = self.Window.Theme.Accent
				
				local connection
				connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
					if gameProcessed then return end
					
					if input.UserInputType == Enum.UserInputType.Keyboard then
						keybind:SetValue(input.KeyCode)
						keybindButton.BackgroundColor3 = self.Window.Theme.Background
						keybind.Listening = false
						connection:Disconnect()
					end
				end)
			end)
			
			-- Also trigger on key press
			UserInputService.InputBegan:Connect(function(input, gameProcessed)
				if gameProcessed or keybind.Listening then return end
				if input.KeyCode == keybind.Value then
					pcall(keybind.Callback, input.KeyCode)
				end
			end)
			
			keybind.UpdateTheme = function(self, theme)
				keybindFrame.BackgroundColor3 = theme.Secondary
				titleLabel.TextColor3 = theme.Text
				keybindButton.BackgroundColor3 = theme.Background
				keybindButton.TextColor3 = theme.Text
				local stroke = keybindFrame:FindFirstChildOfClass("UIStroke")
				if stroke then stroke.Color = theme.Border end
			end
			
			table.insert(self.Elements, keybind)
			return keybind
		end
		
		-- Color Picker Creator
		function tab:CreateColorPicker(config)
			config = config or {}
			local colorpicker = {}
			
			colorpicker.Name = config.Name or "Color Picker"
			colorpicker.Default = config.Default or Color3.fromRGB(255, 255, 255)
			colorpicker.Callback = config.Callback or function() end
			colorpicker.Value = colorpicker.Default
			colorpicker.IsOpen = false
			
			local pickerFrame = Instance.new("Frame")
			pickerFrame.Name = "ColorPicker"
			pickerFrame.Parent = self.Content
			pickerFrame.BackgroundColor3 = self.Window.Theme.Secondary
			pickerFrame.BorderSizePixel = 0
			pickerFrame.Size = UDim2.new(1, 0, 0, 42)
			pickerFrame.LayoutOrder = #self.Elements + 1
			pickerFrame.ClipsDescendants = false
			createCorner(10).Parent = pickerFrame
			createStroke(2, self.Window.Theme.Border).Parent = pickerFrame
			createPadding(12, 12, 10, 10).Parent = pickerFrame
			
			local titleLabel = Instance.new("TextLabel")
			titleLabel.Name = "Title"
			titleLabel.Parent = pickerFrame
			titleLabel.BackgroundTransparency = 1
			titleLabel.Size = UDim2.new(0.7, 0, 1, 0)
			titleLabel.Font = Enum.Font.GothamBold
			titleLabel.Text = colorpicker.Name
			titleLabel.TextColor3 = self.Window.Theme.Text
			titleLabel.TextSize = 13
			titleLabel.TextXAlignment = Enum.TextXAlignment.Left
			
			local colorDisplay = Instance.new("TextButton")
			colorDisplay.Name = "Display"
			colorDisplay.Parent = pickerFrame
			colorDisplay.BackgroundColor3 = colorpicker.Default
			colorDisplay.BorderSizePixel = 0
			colorDisplay.AnchorPoint = Vector2.new(1, 0.5)
			colorDisplay.Position = UDim2.new(1, 0, 0.5, 0)
			colorDisplay.Size = UDim2.new(0, 50, 0, 22)
			colorDisplay.Text = ""
			createCorner(6).Parent = colorDisplay
			createStroke(2, self.Window.Theme.Border).Parent = colorDisplay
			
			-- Color Picker Panel
			local pickerPanel = Instance.new("Frame")
			pickerPanel.Name = "Panel"
			pickerPanel.Parent = pickerFrame
			pickerPanel.BackgroundColor3 = self.Window.Theme.Primary
			pickerPanel.BorderSizePixel = 0
			pickerPanel.Position = UDim2.new(0, 0, 1, 5)
			pickerPanel.Size = UDim2.new(1, 0, 0, 0)
			pickerPanel.Visible = false
			pickerPanel.ZIndex = 100
			createCorner(10).Parent = pickerPanel
			createStroke(2, self.Window.Theme.Border).Parent = pickerPanel
			createPadding(10, 10, 10, 10).Parent = pickerPanel
			
			-- Hue/Saturation Selector
			local hsvFrame = Instance.new("Frame")
			hsvFrame.Name = "HSV"
			hsvFrame.Parent = pickerPanel
			hsvFrame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
			hsvFrame.BorderSizePixel = 0
			hsvFrame.Size = UDim2.new(1, -45, 0, 150)
			createCorner(8).Parent = hsvFrame
			
			local saturation = Instance.new("Frame")
			saturation.Name = "Saturation"
			saturation.Parent = hsvFrame
			saturation.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			saturation.BorderSizePixel = 0
			saturation.Size = UDim2.new(1, 0, 1, 0)
			createCorner(8).Parent = saturation
			
			local saturationGradient = Instance.new("UIGradient")
			saturationGradient.Parent = saturation
			saturationGradient.Transparency = NumberSequence.new({
				NumberSequenceKeypoint.new(0, 0),
				NumberSequenceKeypoint.new(1, 1)
			})
			
			local brightness = Instance.new("Frame")
			brightness.Name = "Brightness"
			brightness.Parent = hsvFrame
			brightness.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
			brightness.BorderSizePixel = 0
			brightness.Size = UDim2.new(1, 0, 1, 0)
			createCorner(8).Parent = brightness
			
			local brightnessGradient = Instance.new("UIGradient")
			brightnessGradient.Parent = brightness
			brightnessGradient.Rotation = 90
			brightnessGradient.Transparency = NumberSequence.new({
				NumberSequenceKeypoint.new(0, 0),
				NumberSequenceKeypoint.new(1, 1)
			})
			
			local selector = Instance.new("Frame")
			selector.Name = "Selector"
			selector.Parent = hsvFrame
			selector.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			selector.BorderSizePixel = 0
			selector.AnchorPoint = Vector2.new(0.5, 0.5)
			selector.Position = UDim2.new(1, 0, 0, 0)
			selector.Size = UDim2.new(0, 8, 0, 8)
			createCorner(4).Parent = selector
			createStroke(2, Color3.fromRGB(0, 0, 0), 0).Parent = selector
			
			-- Hue Slider
			local hueSlider = Instance.new("Frame")
			hueSlider.Name = "HueSlider"
			hueSlider.Parent = pickerPanel
			hueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			hueSlider.BorderSizePixel = 0
			hueSlider.Position = UDim2.new(1, -35, 0, 0)
			hueSlider.Size = UDim2.new(0, 25, 0, 150)
			createCorner(8).Parent = hueSlider
			
			local hueGradient = Instance.new("UIGradient")
			hueGradient.Parent = hueSlider
			hueGradient.Rotation = 90
			hueGradient.Color = ColorSequence.new({
				ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
				ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
				ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
				ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
				ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),
				ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
				ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
			})
			
			local hueSelector = Instance.new("Frame")
			hueSelector.Name = "Selector"
			hueSelector.Parent = hueSlider
			hueSelector.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			hueSelector.BorderSizePixel = 0
			hueSelector.AnchorPoint = Vector2.new(0.5, 0.5)
			hueSelector.Position = UDim2.new(0.5, 0, 0, 0)
			hueSelector.Size = UDim2.new(1, 4, 0, 4)
			createCorner(2).Parent = hueSelector
			createStroke(2, Color3.fromRGB(0, 0, 0), 0).Parent = hueSelector
			
			-- RGB Input
			local rgbFrame = Instance.new("Frame")
			rgbFrame.Name = "RGB"
			rgbFrame.Parent = pickerPanel
			rgbFrame.BackgroundTransparency = 1
			rgbFrame.Position = UDim2.new(0, 0, 0, 160)
			rgbFrame.Size = UDim2.new(1, 0, 0, 30)
			
			local rgbLayout = Instance.new("UIListLayout")
			rgbLayout.Parent = rgbFrame
			rgbLayout.FillDirection = Enum.FillDirection.Horizontal
			rgbLayout.SortOrder = Enum.SortOrder.LayoutOrder
			rgbLayout.Padding = UDim.new(0, 5)
			
			local function createRGBInput(label, order)
				local inputFrame = Instance.new("Frame")
				inputFrame.Name = label
				inputFrame.Parent = rgbFrame
				inputFrame.BackgroundColor3 = self.Window.Theme.Background
				inputFrame.BorderSizePixel = 0
				inputFrame.Size = UDim2.new(0.32, 0, 1, 0)
				inputFrame.LayoutOrder = order
				createCorner(6).Parent = inputFrame
				
				local labelText = Instance.new("TextLabel")
				labelText.Parent = inputFrame
				labelText.BackgroundTransparency = 1
				labelText.Size = UDim2.new(0, 20, 1, 0)
				labelText.Font = Enum.Font.GothamBold
				labelText.Text = label
				labelText.TextColor3 = self.Window.Theme.TextDim
				labelText.TextSize = 11
				
				local input = Instance.new("TextBox")
				input.Name = "Input"
				input.Parent = inputFrame
				input.BackgroundTransparency = 1
				input.Position = UDim2.new(0, 20, 0, 0)
				input.Size = UDim2.new(1, -25, 1, 0)
				input.Font = Enum.Font.Gotham
				input.Text = "255"
				input.TextColor3 = self.Window.Theme.Text
				input.TextSize = 11
				input.TextXAlignment = Enum.TextXAlignment.Right
				
				return input
			end
			
			local rInput = createRGBInput("R", 1)
			local gInput = createRGBInput("G", 2)
			local bInput = createRGBInput("B", 3)
			
			-- Color Logic
			local h, s, v = rgbToHSV(colorpicker.Default.R * 255, colorpicker.Default.G * 255, colorpicker.Default.B * 255)
			
			local function updateColor()
				local r, g, b = hsvToRGB(h, s, v)
				local color = Color3.fromRGB(r, g, b)
				
				colorpicker.Value = color
				colorDisplay.BackgroundColor3 = color
				
				rInput.Text = tostring(math.floor(r))
				gInput.Text = tostring(math.floor(g))
				bInput.Text = tostring(math.floor(b))
				
				hsvFrame.BackgroundColor3 = Color3.fromHSV(h, 1, 1)
				selector.Position = UDim2.new(s, 0, 1 - v, 0)
				hueSelector.Position = UDim2.new(0.5, 0, h, 0)
				
				pcall(colorpicker.Callback, color)
			end
			
			local hsvDragging = false
			local hueDragging = false
			
			local hsvButton = Instance.new("TextButton")
			hsvButton.Parent = hsvFrame
			hsvButton.BackgroundTransparency = 1
			hsvButton.Size = UDim2.new(1, 0, 1, 0)
			hsvButton.Text = ""
			hsvButton.ZIndex = 5
			
			hsvButton.MouseButton1Down:Connect(function()
				hsvDragging = true
			end)
			
			local hueButton = Instance.new("TextButton")
			hueButton.Parent = hueSlider
			hueButton.BackgroundTransparency = 1
			hueButton.Size = UDim2.new(1, 0, 1, 0)
			hueButton.Text = ""
			hueButton.ZIndex = 5
			
			hueButton.MouseButton1Down:Connect(function()
				hueDragging = true
			end)
			
			UserInputService.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					hsvDragging = false
					hueDragging = false
				end
			end)
			
			RunService.Heartbeat:Connect(function()
				if hsvDragging then
					local mousePos = UserInputService:GetMouseLocation()
					local pos = hsvFrame.AbsolutePosition
					local size = hsvFrame.AbsoluteSize
					
					s = math.clamp((mousePos.X - pos.X) / size.X, 0, 1)
					v = 1 - math.clamp((mousePos.Y - pos.Y) / size.Y, 0, 1)
					
					updateColor()
				end
				
				if hueDragging then
					local mousePos = UserInputService:GetMouseLocation()
					local pos = hueSlider.AbsolutePosition
					local size = hueSlider.AbsoluteSize
					
					h = math.clamp((mousePos.Y - pos.Y) / size.Y, 0, 1)
					
					updateColor()
				end
			end)
			
			-- RGB Input Handlers
			local function handleRGBInput()
				local r = tonumber(rInput.Text) or 0
				local g = tonumber(gInput.Text) or 0
				local b = tonumber(bInput.Text) or 0
				
				r = math.clamp(r, 0, 255)
				g = math.clamp(g, 0, 255)
				b = math.clamp(b, 0, 255)
				
				h, s, v = rgbToHSV(r, g, b)
				updateColor()
			end
			
			rInput.FocusLost:Connect(handleRGBInput)
			gInput.FocusLost:Connect(handleRGBInput)
			bInput.FocusLost:Connect(handleRGBInput)
			
			function colorpicker:SetValue(color)
				h, s, v = rgbToHSV(color.R * 255, color.G * 255, color.B * 255)
				updateColor()
			end
			
			function colorpicker:Toggle()
				self.IsOpen = not self.IsOpen
				
				if self.IsOpen then
					pickerPanel.Visible = true
					tween(pickerPanel, {Size = UDim2.new(1, 0, 0, 200)}, 0.3)
					tween(pickerFrame, {Size = UDim2.new(1, 0, 0, 42 + 205)}, 0.3)
				else
					tween(pickerPanel, {Size = UDim2.new(1, 0, 0, 0)}, 0.3)
					tween(pickerFrame, {Size = UDim2.new(1, 0, 0, 42)}, 0.3)
					task.wait(0.3)
					pickerPanel.Visible = false
				end
			end
			
			colorDisplay.MouseButton1Click:Connect(function()
				colorpicker:Toggle()
			end)
			
			updateColor()
			
			colorpicker.UpdateTheme = function(self, theme)
				pickerFrame.BackgroundColor3 = theme.Secondary
				titleLabel.TextColor3 = theme.Text
				pickerPanel.BackgroundColor3 = theme.Primary
				
				local stroke = pickerFrame:FindFirstChildOfClass("UIStroke")
				if stroke then stroke.Color = theme.Border end
				
				for _, input in ipairs(rgbFrame:GetChildren()) do
					if input:IsA("Frame") then
						input.BackgroundColor3 = theme.Background
						local label = input:FindFirstChild("TextLabel")
						local textbox = input:FindFirstChild("Input")
						if label then label.TextColor3 = theme.TextDim end
						if textbox then textbox.TextColor3 = theme.Text end
					end
				end
			end
			
			table.insert(self.Elements, colorpicker)
			return colorpicker
		end
		
		-- Label Creator
		function tab:CreateLabel(text)
			local label = Instance.new("TextLabel")
			label.Name = "Label"
			label.Parent = self.Content
			label.BackgroundTransparency = 1
			label.Size = UDim2.new(1, 0, 0, 20)
			label.Font = Enum.Font.Gotham
			label.Text = text
			label.TextColor3 = self.Window.Theme.TextDim
			label.TextSize = 12
			label.TextXAlignment = Enum.TextXAlignment.Left
			label.TextWrapped = true
			label.LayoutOrder = #self.Elements + 1
			
			local labelObj = {
				Type = "Label",
				Element = label,
				UpdateTheme = function(self, theme)
					label.TextColor3 = theme.TextDim
				end,
				SetText = function(self, newText)
					label.Text = newText
				end
			}
			
			table.insert(self.Elements, labelObj)
			return labelObj
		end
		
		-- Paragraph Creator
		function tab:CreateParagraph(config)
			config = config or {}
			
			local paragraphFrame = Instance.new("Frame")
			paragraphFrame.Name = "Paragraph"
			paragraphFrame.Parent = self.Content
			paragraphFrame.BackgroundColor3 = self.Window.Theme.Secondary
			paragraphFrame.BorderSizePixel = 0
			paragraphFrame.Size = UDim2.new(1, 0, 0, 80)
			paragraphFrame.LayoutOrder = #self.Elements + 1
			paragraphFrame.AutomaticSize = Enum.AutomaticSize.Y
			createCorner(10).Parent = paragraphFrame
			createStroke(2, self.Window.Theme.Border).Parent = paragraphFrame
			createPadding(12, 12, 10, 10).Parent = paragraphFrame
			
			local titleLabel = Instance.new("TextLabel")
			titleLabel.Name = "Title"
			titleLabel.Parent = paragraphFrame
			titleLabel.BackgroundTransparency = 1
			titleLabel.Size = UDim2.new(1, 0, 0, 20)
			titleLabel.Font = Enum.Font.GothamBold
			titleLabel.Text = config.Title or "Paragraph"
			titleLabel.TextColor3 = self.Window.Theme.Text
			titleLabel.TextSize = 13
			titleLabel.TextXAlignment = Enum.TextXAlignment.Left
			
			local contentLabel = Instance.new("TextLabel")
			contentLabel.Name = "Content"
			contentLabel.Parent = paragraphFrame
			contentLabel.BackgroundTransparency = 1
			contentLabel.Position = UDim2.new(0, 0, 0, 22)
			contentLabel.Size = UDim2.new(1, 0, 1, -22)
			contentLabel.Font = Enum.Font.Gotham
			contentLabel.Text = config.Content or ""
			contentLabel.TextColor3 = self.Window.Theme.TextDim
			contentLabel.TextSize = 11
			contentLabel.TextWrapped = true
			contentLabel.TextXAlignment = Enum.TextXAlignment.Left
			contentLabel.TextYAlignment = Enum.TextYAlignment.Top
			contentLabel.AutomaticSize = Enum.AutomaticSize.Y
			
			local paragraph = {
				Type = "Paragraph",
				UpdateTheme = function(self, theme)
					paragraphFrame.BackgroundColor3 = theme.Secondary
					titleLabel.TextColor3 = theme.Text
					contentLabel.TextColor3 = theme.TextDim
					local stroke = paragraphFrame:FindFirstChildOfClass("UIStroke")
					if stroke then stroke.Color = theme.Border end
				end,
				SetTitle = function(self, newTitle)
					titleLabel.Text = newTitle
				end,
				SetContent = function(self, newContent)
					contentLabel.Text = newContent
				end
			}
			
			table.insert(self.Elements, paragraph)
			return paragraph
		end
		
		table.insert(self.Tabs, tab)
		
		-- Auto-select first tab
		if #self.Tabs == 1 then
			tab.Button.MouseButton1Click:Fire()
		end
		
		return tab
	end
	
	return window
end

-- Initialize and Return
return Pulse
